二叉树的中序遍历的记忆法则是“左根右”，即先遍历左子树节点，再遍历根节点，再遍历右子树节点。
中序遍历的结果是：D,B,E,A,F,C,G

递归：

递归是是实现前中后序遍历最常用的方法：

需要满足三个条件：
1.一个问题的解可以分解为若干个子问题的解。
2.这个问题与分解的子问题，除了数据规模不同之外，求解思路相同
3.存在递归终止条件

写出递归公式，找到终止条件。

二叉树的中序遍历问题上，它的递归公式是：
inorder(node)=inorder(node->left)->print node->inorder(node->right)

终止条件是：
node是否为空，为空则返回。

迭代：

初始化stack，初始化输出列表：
设置一个变量cur,表示当前节点，并赋初始值为根节点root。
while(栈不为空 或者 当前节点cur不为空），在：
  沿着当前节点的左分支一直走，直到为空。在这个过程中将遍历的节点都入栈。
  栈顶元素出栈，同时将栈顶元素添加到输出列表。
  更新当前节点cur为栈顶元素的右子树节点。
返回输出列表res

初始时：当前节点cur = root,即节点A
共有七次重复过程：
1.Loop 1
沿着A节点的左分支一直遍历，遍历过程中将A,B,D依次放入栈中
栈顶元素D出栈，将D添加到输出列表
并将D的右子树节点赋给cur,此时cur = NULL
第一次循环后，stack和res的结果
。。。。。

