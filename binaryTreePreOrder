二叉树的前序遍历：

解答思路：1.递归（调用函数自身的方法，可以解决用简单问题解答复杂问题）


二叉树的前序遍历的记忆法则是‘根，左，右’，即先遍历根节点，再遍历左子树节点，再遍历右子树节点。

前序遍历的结果由，遍历根，左，右得来。

递归是实现前中后序遍历最常用的方法。

什么问题可以采用递归求解呢？

需要满足三个条件：

1.一个问题的解可以分解成若干个子问题的解。

2.这个问题与分解的子问题，除了数据规模不同外，求解思路相同

3.存在递归终止条件

如何写出递归代码？

能写出递归公式，找到终止条件。

在二叉树的前序遍历问题上，它的递归公式是？
preorder(node) = print node ->preorder(node->left)->preorder(node->right)

它的终止条件是：

node是否为空，为空则返回。

解题思路2.迭代

在递归方法实现过程中，它的底层是基于系统栈的结构来实现的。

因此可以利用栈的数据结构来辅助实现基于迭代方式的前序遍历。

具体思路为：

-初始化栈Stack，初始化输出列表res
-根节点入栈
-while（栈不为空），在循环内部：
  -栈顶元素出栈
  -栈顶元素输出到输出列表
  -如果栈顶元素的右子树节点不为空，将右子树节点入栈
  -如果栈顶元素的左子树节点不为空，将左子树节点入栈
-返回输出列表res

出栈顺序是先根，之后是左，右，符合前序遍历的要求


解题思路3.迭代

-初始化栈Stack，初始化输出列表res
-设置一个变量cur,表示当前节点。并赋初始值为根节点root
-while（栈不为空或者当前节点cur不为空）在循环体内部：
  -沿着当前节点的左分支一直走，直到为空
  -栈顶元素出栈
  -更新当前节点cur为栈顶元素的右子树节点
-返回输出列表res






