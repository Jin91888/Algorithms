给定一个整数数组nums和一个整数目标值target,请你在该数组中找出和为目标值的两个整数，并返回它
们的数组下标。

可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

可以按任意顺序返回答案：

输入:nums = [2,7,11,15],target = 9 

输出：0,1


1.暴力法：两个指针，移动一个指针，前一个指针不动。

2.哈希表法:

两个数相加=9

返回的是2和7的索引的位置。


输入：11,15,2,7
输出：2,3

暴力法伪代码：

题目肯定给了一个function（nums,target）
给了一个数组nums，给了一个目标值:target
要返回的是一个数组，其实就是两个数的索引

首先要有一个result,应该把它定义成数组，如果说它的长度为多少，那么它的长度必然为2
result = [];   [0,1]长度为2

设置两个指针i,j

i是固定不动的指针，j指针是每次i不动，它一直在移动的指针
for i in [0,len(nums)):  不动
i是从0到数组的尾端，j是从1到数组的尾端
for j in [i+1,len(nums)]:  移动
sum = nums[i]+nums[j]
if sum == target
result的长度为2
result[0] = i
result[1] = j

把result 0的位置放上i或者j
把result 1的位置放上i或j
最后返回result值
return result



哈希表法：(0)


伪代码



两数相加：
1.给你两个非空的链表，表示两个非负的整数。
链表表示整数？？
2.它们每位数字都是按照逆序的方式存储的，
3.并且每个节点只能存储一位数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。

 
输入：
1->4->3
5->6->4
输出：
7->0->8
每个节点只存储一位数，所以是0，不是10

1.迭代法

方法：从左到右依次相加。
/    12/10 (12//10)=1  除数
%    12%10=2  余数
每次进1，在代码里肯定要一个一个变量标记
next1=1,就代表下一位要进1 
next1表示下一位要进位多少。

迭代法伪代码：
题目会给一个function,然后给l1,l2两个链表。返回的是一个新的链表。
func(l1,l2)---->Listnode：

total = 0   total代表，它俩相加和等于多少。

next1=0    next1代表 我是否要往下一位进1.//一开始初始化都是0


接下来要有一个result,最终要返回的结果集。
result = ListNode()
cur = result
.->1->2->3

while(l1!=null and l2!=null):
totol = l1.val + l2.val +next1
cur.next = ListNode(total % 10)
next1 = total/10
l1 = l1.next
l2 = l2.next
cur = cur.next

while l1!=null
total = l1.val + 






















2.递归法









