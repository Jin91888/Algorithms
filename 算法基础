基础算法：
一.排序
1.快速排序quick_sort
2.归并排序merge_sort


二.二分算法
1.整数二分算法
2.浮点数二分算法


用应用程序进行编程和问题解决：
算法：解决问题的方法
数据结构：存储信息的方法
在一个应用程序的真实应用场景下：

数据类型：栈，队列，包，联合查找，优先队列
排序：快排，合并排序，堆排序，基数排序
查找：二叉查找树，红黑树，哈希表（散列表）（映射）



第二部分：讲更高级的算法：
图论算法，经典的图的搜索算法，最小生成树和最短路径，字符串处理的算法，正则表达式和数据压缩

为什么要学算法？

它们产生的影响非常深远，从互联网到生物学，商业计算，计算机图形安全，多媒体，社交网络，
科学应用等领域，算法都无处不在。

它们可以用来制作电影，游戏，模拟粒子碰撞，研究基因组


欧几里得研究了第一个算法：

研究算法是为了解决那些非算法不能解决的问题

网络连通性问题。


如何编程：
需要知道知道基本的循环，数组和函数
需要知道面向对象编程
需要知道递归

使用JAVA做描述性的语言
需要一些数学基础，但不包括高等数学。

An Itroduction to Programming in Java:An Interdisciplinary Approach

学习目标
应用 union-find 数据类型来解决科学、工程和工业中的问题。
定义联合查找（或不相交集）数据类型。
比较联合查找数据类型的不同算法的性能。
为 union-find 数据类型设计不同的算法（快速查找、快速联合、加权快速联合、路径压缩）。
为 union-find 数据类型开发不同算法的 Java 实现。
使用父链接表示来表示 树数据结构 。


并查集：
动态连通性问题的算法：
两个经典算法：快速查找和快速合并

体验一下我们日后反复经历的开发有效算法的流程
首先第一步是 建立问题模型，找出解决该问题大体上所需要的基本操作
据此找出算法解决该问题
在很多情况下
我们最初提出的算法可能已经足够快
并且符合对存储空间的要求
这种算法我们可以直接拿来用

但是在另一些情况下 
算法可能不够快
或者存储空间不足
我们需要考虑清楚、为什么会这样
设计和分析算法的科学途径

先建立数学模型 搞清楚问题的实质 然后通过实践来验证模型
进而改进模型和方法
动态连通性问题
并查集问题的模型


有一组共N个对象，用0到N的数字来标记它们 
两个对象间可以连通 
假设有一个命令用来连接两个对象 将两个对象传入该命令 
将创造两者之间的连接
连通性的查询，即查询两个对象之间是否有连通的路径存在













